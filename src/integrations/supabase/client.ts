
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Store the config and client instance
let supabaseInstance: ReturnType<typeof createClient<Database>> | null = null;
let configPromise: Promise<{url: string, key: string}> | null = null;

// Load configuration from config.json
const loadSupabaseConfig = async () => {
  if (configPromise) {
    return configPromise;
  }
  
  configPromise = (async () => {
    const response = await fetch('/config.json');
    if (!response.ok) {
      throw new Error('Failed to load config.json');
    }
    const config = await response.json();
    return {
      url: config.supabase.url,
      key: config.supabase.publishable_key
    };
  })();
  
  return configPromise;
};

// Initialize the client
const initializeSupabaseClient = async () => {
  if (supabaseInstance) {
    return supabaseInstance;
  }

  try {
    const config = await loadSupabaseConfig();
    supabaseInstance = createClient<Database>(config.url, config.key, {
      auth: {
        storage: localStorage,
        persistSession: true,
        autoRefreshToken: true,
      }
    });
    console.log('Supabase client initialized successfully');
    return supabaseInstance;
  } catch (error) {
    console.error('Failed to initialize Supabase client:', error);
    throw error;
  }
};

// Create a lazy client that initializes on first use
let clientPromise: Promise<ReturnType<typeof createClient<Database>>> | null = null;

const getSupabaseClient = () => {
  if (!clientPromise) {
    clientPromise = initializeSupabaseClient();
  }
  return clientPromise;
};

// Export a proxy object that initializes the client on first property access
export const supabase = new Proxy({} as ReturnType<typeof createClient<Database>>, {
  get(target, prop) {
    // If the client hasn't been initialized yet, throw an error with helpful message
    if (!supabaseInstance) {
      throw new Error('Supabase client not initialized. Make sure to call getSupabaseClient() first.');
    }
    return (supabaseInstance as any)[prop];
  }
});

// For backward compatibility
export const supabaseClient = supabase;

// Export function to get initialized client
export { getSupabaseClient };

// Export the promise for components that need to wait for initialization
export const supabaseReady = getSupabaseClient();
